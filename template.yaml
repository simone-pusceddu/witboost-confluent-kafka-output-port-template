apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: confluent-kafka-output-port-template-skeleton
  title: Confluent Kafka Output Port Template (Skeleton)
  description: Allow to manage a Kafka Topic as an Output Port
  annotations:
    backstage.io/techdocs-ref: dir:.
  tags:
    - output-port
    - confluent
    - kafka
spec:
  generates: componenttype:default/outputport
  owner: agilelab
  type: outputport
  parameters:
    - title: Component metadata
      description: Basic information for this component.
      required:
        - name
        - description
        - domain
        - parentRef
        - identifier
      properties:
        name:
          title: Name
          type: string
          description: Required. The name, used for display purposes.
          ui:field: EntityNamePicker
          default: Kafka Output Port
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Help others understand what this Output Port is for.
          default: Output Port that exposes information of this System to users and other data products
        domain:
          title: Domain
          type: string
          description: Domain of the System this Output Port belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        parentRef:
          title: Parent
          type: string
          description: Required. The System this Output Port belongs to, e.g. a Data Product. Be sure to choose the right one.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for the component. It will not be editable after creation and is a string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        owner:
          title: Owner
          type: string
          description: Automatically selected from the System metadata.
          ui:field: EntitySelectionPicker
          ui:fieldName: parentRef
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues:
              false
        dependsOn:
          title: Depends on
          type: array
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: parentRef
            relation: hasPart
          description: An Output Port could depend on other Output Ports or storage areas
        tags:
          title: Tags
          type: array
          description: Tags for the component
          default: [ ]
          items:
            type: string
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: parentRef
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: Terms & Conditions and SLA
      description: Terms & Conditions and Service Level Agreement information for this component.
      required:
        - termsAndConditions
        - intervalOfChange
        - timeliness
        - upTime
      properties:
        termsAndConditions:
          title: Terms and Conditions
          type: string
          description: Required. Terms and Conditions that apply to the data.
          default: Can be used for production purposes.
        intervalOfChange:
          title: Interval of change
          type: string
          description: Required. How often the data is refreshed.
          default: 2BD
        timeliness:
          title: Timeliness
          type: string
          description: Required. Timeliness of the data.
          default: 2BD
        upTime:
          title: Uptime
          type: string
          description: Required. Uptime of the Output Port.
          default: 99.9%

    - title: Data Sharing Agreement
      description: Update the Data Sharing Agreement clauses for this component.
      required:
        - purpose
        - billing
        - security
        - intendedUsage
        - limitations
        - lifeCycle
        - confidentiality
      properties:
        purpose:
          title: Purpose
          type: string
          description: Required. Purpose of the data.
          default: Foundational data for downstream use cases.
        billing:
          title: Billing
          type: string
          description: Required. Billing applied to data usage.
          default: None.
        security:
          title: Security
          type: string
          description: Required. Security policies that apply to the data.
          default: Platform standard security policies.
        intendedUsage:
          title: Intended Usage
          type: string
          description: Required. Intended usage for the data.
          default: Any downstream use cases.
        limitations:
          title: Limitations
          type: string
          description: Required. Limitations of the data.
          default: Needs joining with other datasets (eg customer data) for most analytical use cases.
        lifeCycle:
          title: Lifecycle
          type: string
          description: Required. Lifecycle of the data.
          default: Data loaded every two days and typically never deleted.
        confidentiality:
          title: Confidentiality
          type: string
          description: Required. Confidentiality of the data.
          default: None.

    - title: Provide Output port deployment information
      description: Topic properties. Name will be computed automatically based on domain, parent system, component name and environment.
      required:
        - numPartitions
        - replicationFactor
      properties:
        numPartitions:
          title: Number of partitions
          type: number
          minimum: 1
          description: The number of Kafka partitions.
          default: 1
        replicationFactor:
          title: Topic replication factor
          type: number
          minimum: 1
          description: Kafka replicates the event log for each topicâ€™s partitions across a configurable number of servers. This replication factor is configured at the topic level, and the unit of replication is the topic partition. This enables automatic failover to these replicas when a server in the cluster fails so messages remain available.
          default: 1

    - title: Advanced settings
      properties:
        enableAdvancedSettings:
          type: boolean
          title: Enable Advanced Settings
          default: false
      allOf:
        - if:
            properties:
              enableAdvancedSettings:
                const: true
          then:
            properties:
              advancedSettings:
                title: Advanced settings
                type: array
                minItems: 1
                items:
                  type: object
                  ui:ObjectFieldTemplate: HorizontalTemplate
                  ui:options:
                    elementsPerRow: 2                  
                  required:
                    - key
                    - value
                  properties:
                    key:
                      title: Property Key
                      type: string
                    value:
                      title: Property Value
                      type: string
            required:
              - advancedSettings

    - title: Message Value Schema
      description: Definition of the message value schema.
      properties:
        enableMessageValueSchema:
          type: boolean
          title: Enable definition for Message Value Schema
          default: false
      allOf:
        - if:
            properties:
              enableMessageValueSchema:
                const: true
          then:
            required:
              - messageValueSchemaType
              - messageValueSchemaDefinition
            properties:
              messageValueSchemaType:
                title: Schema Type
                type: string
                description: The schema type.
                enum:
                  - JSON
                  - AVRO
                enumNames:
                  - JSON Schema
                  - Avro
              messageValueSchemaDefinition:
                title: Schema Definition
                type: string
                description: The schema definition.
                ui:options:
                  multiline: true
                  rows: 25
                ui:style:
                  font-family: Consolas
                  color: "#111"

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          parentRef: '${{ parameters.parentRef }}'
          identifier: '${{ parameters.identifier }}'
          owner: '${{ parameters.owner }}'
          dependsOn: '${{ parameters.dependsOn }}'
          tags: '${{ parameters.tags }}'
          domainName: '${{ parameters.domainName }}'
          dataproductName: '${{ parameters.dataproductName }}'
          termsAndConditions: '${{ parameters.termsAndConditions }}'
          intervalOfChange: '${{ parameters.intervalOfChange }}'
          timeliness: '${{ parameters.timeliness }}'
          upTime: '${{ parameters.upTime }}'
          purpose: '${{ parameters.purpose }}'
          billing: '${{ parameters.billing }}'
          security: '${{ parameters.security }}'
          intendedUsage: '${{ parameters.intendedUsage }}'
          limitations: '${{ parameters.limitations }}'
          lifeCycle: '${{ parameters.lifeCycle }}'
          confidentiality: '${{ parameters.confidentiality }}'
          numPartitions: ${{ parameters.numPartitions }}
          replicationFactor: ${{ parameters.replicationFactor }}
          enableAdvancedSettings: ${{ parameters.enableAdvancedSettings }}
          advancedSettings: ${{ parameters.advancedSettings }}
          enableMessageValueSchema: ${{ parameters.enableMessageValueSchema }}
          messageValueSchemaType: ${{ parameters.messageValueSchemaType }}
          messageValueSchemaDefinition: ${{ parameters.messageValueSchemaDefinition | dump }}
          useCaseTemplateId: urn:dmb:utm:confluent-kafka-outputport-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:confluent-kafka-tech-adapter:0
          destination: &destination 'gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          useCaseTemplateVersion: 0.0.0

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        parentRef: '${{ parameters.parentRef }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
